#!/bin/sh
#
# Stops all Docker services, stacks and containers, removes unused data
# and takes down the node from a swarm.  Volumes are retained but can be
# removed by passing "--volumes" as an argument to this script.
#
# Passing "--all" as an argument will remove all images and not just dangling
# images.
#
# IMPORTANT NOTE - use with Docker 17.06.1 or higher.  Script will remove all
# volumes for earlier versions.  Use at own risk!
#
# MIT LICENSE
#
# Copyright (c) 2018 Philip Darke philipdarke.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Parse arguments
while [ $# -gt 0 ]; do
	case $1 in
		--volumes)
			EXTRA_PRUNE_ARGS="$EXTRA_PRUNE_ARGS --volumes"
			;;
		--all)
			EXTRA_PRUNE_ARGS="$EXTRA_PRUNE_ARGS --all"
			;;
	esac
	shift
done

# Check if this host is part of a swarm
[ ! "$(docker info | grep 'Swarm' | sed 's/Swarm: //g')" = "active" ]
IS_IN_SWARM=$?

[ ! "$(docker info | grep 'Is Manager' | sed 's/ Is Manager: //g')" = "true" ]
IS_SWARM_MANAGER=$?

# If we're a swarm manager, kill services and stacks
if [ "$IS_SWARM_MANAGER" = "1" ]; then
	# Stop all running services
	SERVICES=$(docker service ls -q)
	if [ ! -z "$SERVICES" ]; then
		echo "Removing services..."
		docker service rm $SERVICES
		echo
	fi

	# Tear down all stacks
	STACKS=$(docker stack ls --format "{{.Name}}")
	if [[ ! -z $STACKS ]]; then
		echo "Removing stacks..."
		docker stack rm $STACKS
		echo
	fi
fi

# Stop any remaining running containers and remove all old containers
CONTAINERS=$(docker ps -a -q)
if [[ ! -z $STACKS ]]; then
	echo "Stopping containers..."
	docker stop $CONTAINERS
	echo
fi

# Remove node from the swarm (if in one)
if [ "$IS_IN_SWARM" = "1" ]; then
	docker swarm leave --force
	echo
fi

# Remove unused containers, networks and images (SEE IMPORTANT NOTE ABOVE)
docker system prune --force $EXTRA_PRUNE_ARGS
